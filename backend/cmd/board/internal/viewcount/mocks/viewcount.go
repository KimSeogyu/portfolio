// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/board/internal/viewcount/viewcount.go
//
// Generated by this command:
//
//	mockgen -source=cmd/board/internal/viewcount/viewcount.go -destination=cmd/board/internal/viewcount/mocks/viewcount.go
//

// Package mock_viewcount is a generated GoMock package.
package mock_viewcount

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockViewCountManager is a mock of ViewCountManager interface.
type MockViewCountManager struct {
	ctrl     *gomock.Controller
	recorder *MockViewCountManagerMockRecorder
	isgomock struct{}
}

// MockViewCountManagerMockRecorder is the mock recorder for MockViewCountManager.
type MockViewCountManagerMockRecorder struct {
	mock *MockViewCountManager
}

// NewMockViewCountManager creates a new mock instance.
func NewMockViewCountManager(ctrl *gomock.Controller) *MockViewCountManager {
	mock := &MockViewCountManager{ctrl: ctrl}
	mock.recorder = &MockViewCountManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViewCountManager) EXPECT() *MockViewCountManagerMockRecorder {
	return m.recorder
}

// CheckAndIncrement mocks base method.
func (m *MockViewCountManager) CheckAndIncrement(ctx context.Context, postingID int64, authorID, authUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndIncrement", ctx, postingID, authorID, authUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndIncrement indicates an expected call of CheckAndIncrement.
func (mr *MockViewCountManagerMockRecorder) CheckAndIncrement(ctx, postingID, authorID, authUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndIncrement", reflect.TypeOf((*MockViewCountManager)(nil).CheckAndIncrement), ctx, postingID, authorID, authUserID)
}
