// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/board/internal/postings/repository.go
//
// Generated by this command:
//
//	mockgen -source=cmd/board/internal/postings/repository.go -destination=cmd/board/internal/postings/mocks/repository.go
//

// Package mock_postings is a generated GoMock package.
package mock_postings

import (
	context "context"
	reflect "reflect"

	postings "github.com/kimseogyu/portfolio/backend/cmd/board/internal/postings"
	db "github.com/kimseogyu/portfolio/backend/internal/db"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DecrementCommentCount mocks base method.
func (m *MockRepository) DecrementCommentCount(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementCommentCount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementCommentCount indicates an expected call of DecrementCommentCount.
func (mr *MockRepositoryMockRecorder) DecrementCommentCount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementCommentCount", reflect.TypeOf((*MockRepository)(nil).DecrementCommentCount), ctx, id)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockRepository) FindAll(ctx context.Context, pagination *db.CursorBasedPagination) (*db.CursorBasedPaginationResponse[postings.Posting], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, pagination)
	ret0, _ := ret[0].(*db.CursorBasedPaginationResponse[postings.Posting])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll(ctx, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), ctx, pagination)
}

// FindOneByID mocks base method.
func (m *MockRepository) FindOneByID(ctx context.Context, id int64) (*postings.Posting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", ctx, id)
	ret0, _ := ret[0].(*postings.Posting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID.
func (mr *MockRepositoryMockRecorder) FindOneByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockRepository)(nil).FindOneByID), ctx, id)
}

// IncrementCommentCount mocks base method.
func (m *MockRepository) IncrementCommentCount(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementCommentCount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementCommentCount indicates an expected call of IncrementCommentCount.
func (mr *MockRepositoryMockRecorder) IncrementCommentCount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCommentCount", reflect.TypeOf((*MockRepository)(nil).IncrementCommentCount), ctx, id)
}

// IncrementViewCount mocks base method.
func (m *MockRepository) IncrementViewCount(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementViewCount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementViewCount indicates an expected call of IncrementViewCount.
func (mr *MockRepositoryMockRecorder) IncrementViewCount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementViewCount", reflect.TypeOf((*MockRepository)(nil).IncrementViewCount), ctx, id)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, data *postings.Posting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, data)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, id int64, data postings.Posting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, id, data)
}
