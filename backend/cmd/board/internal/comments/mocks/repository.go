// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/board/internal/comments/repository.go
//
// Generated by this command:
//
//	mockgen -source=cmd/board/internal/comments/repository.go -destination=cmd/board/internal/comments/mocks/repository.go
//

// Package mock_comments is a generated GoMock package.
package mock_comments

import (
	context "context"
	reflect "reflect"

	comments "github.com/kimseogyu/portfolio/backend/cmd/board/internal/comments"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id int64) (*comments.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*comments.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
}

// GetByPostID mocks base method.
func (m *MockRepository) GetByPostID(ctx context.Context, postID int64) ([]comments.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPostID", ctx, postID)
	ret0, _ := ret[0].([]comments.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPostID indicates an expected call of GetByPostID.
func (mr *MockRepositoryMockRecorder) GetByPostID(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPostID", reflect.TypeOf((*MockRepository)(nil).GetByPostID), ctx, postID)
}

// GetChildComments mocks base method.
func (m *MockRepository) GetChildComments(ctx context.Context, postID, parentID int64, page, pageSize int) ([]comments.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildComments", ctx, postID, parentID, page, pageSize)
	ret0, _ := ret[0].([]comments.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildComments indicates an expected call of GetChildComments.
func (mr *MockRepositoryMockRecorder) GetChildComments(ctx, postID, parentID, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildComments", reflect.TypeOf((*MockRepository)(nil).GetChildComments), ctx, postID, parentID, page, pageSize)
}

// GetThread mocks base method.
func (m *MockRepository) GetThread(ctx context.Context, postID int64, page, pageSize int) ([]comments.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThread", ctx, postID, page, pageSize)
	ret0, _ := ret[0].([]comments.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThread indicates an expected call of GetThread.
func (mr *MockRepositoryMockRecorder) GetThread(ctx, postID, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThread", reflect.TypeOf((*MockRepository)(nil).GetThread), ctx, postID, page, pageSize)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, comment *comments.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, comment)
}

// UpdatePostingCommentCount mocks base method.
func (m *MockRepository) UpdatePostingCommentCount(ctx context.Context, postID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostingCommentCount", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostingCommentCount indicates an expected call of UpdatePostingCommentCount.
func (mr *MockRepositoryMockRecorder) UpdatePostingCommentCount(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostingCommentCount", reflect.TypeOf((*MockRepository)(nil).UpdatePostingCommentCount), ctx, postID)
}
