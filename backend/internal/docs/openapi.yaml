# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: BoardService API
    description: |-
        BoardService는 게시물과 댓글의 생성, 조회, 수정, 삭제 기능을 제공합니다.
         이 서비스는 RESTful API와 gRPC 인터페이스를 모두 지원합니다.

         인증 요구사항:
         - 모든 API 호출은 gRPC 메타데이터에 인증 정보를 포함해야 합니다.
         - 필수 메타데이터 키:
           * "authorization": Bearer 토큰 형식으로 "Bearer {token}" 형태로 제공
           * "x-api-key": API 키 (선택적, 서비스 계정 인증 시 사용)

         인증 오류 코드:
         - UNAUTHENTICATED: 인증 정보가 없거나 유효하지 않은 경우
         - PERMISSION_DENIED: 인증은 됐지만 요청된 작업에 대한 권한이 없는 경우
         - RESOURCE_EXHAUSTED: 속도 제한 초과 시
    version: 0.0.1
paths:
    /v1/postings:
        get:
            tags:
                - BoardService
            description: |-
                ListPostings는 페이지네이션을 지원하는 게시물 목록 조회 API입니다.
                 정렬 및 태그 기반 필터링을 지원합니다.
                 page_token을 사용한 커서 기반 페이지네이션을 구현합니다.

                 인증 요구사항:
                 - 인증 없이 공개 게시물만 조회 가능합니다.
                 - 인증된 사용자는 자신의 초안 게시물도 결과에 포함됩니다.
                 - 관리자는 모든 게시물을 조회할 수 있습니다.
            operationId: BoardService_ListPostings
            parameters:
                - name: pageSize
                  in: query
                  description: '한 페이지에 반환할 최대 게시물 수 (기본값: 20, 최대: 100)'
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: 페이지네이션 토큰 (첫 페이지는 빈 문자열)
                  schema:
                    type: string
                - name: sortBy
                  in: query
                  description: '정렬 기준 (기본값: CREATED_AT)'
                  schema:
                    type: integer
                    format: enum
                - name: sortDirection
                  in: query
                  description: '정렬 방향 (기본값: DESC)'
                  schema:
                    type: integer
                    format: enum
                - name: filterByTag
                  in: query
                  description: 태그로 필터링 (선택, 특정 태그가 있는 게시물만 표시)
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPostingsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - BoardService
            description: |-
                CreatePosting은 새로운 게시물을 생성합니다.
                 성공 시 생성된 게시물의 전체 정보를 반환합니다.
                 필수 필드: title, content, author_id

                 인증 요구사항:
                 - 유효한 사용자 토큰이 필요합니다.
                 - author_id는 토큰의 사용자 ID와 일치해야 합니다(관리자 제외).
            operationId: BoardService_CreatePosting
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreatePostingRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Posting'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/postings/search:
        get:
            tags:
                - BoardService
            description: |-
                SearchPostings는 게시물 제목과 내용에서 검색어를 포함하는 게시물을 찾습니다.
                 페이지네이션과 정렬 방향을 지원합니다.
                 query가 비어있으면 모든 게시물을 반환합니다.
            operationId: BoardService_SearchPostings
            parameters:
                - name: text
                  in: query
                  description: 기본 검색어
                  schema:
                    type: string
                - name: titleContains
                  in: query
                  description: 제목 내 검색
                  schema:
                    type: string
                - name: contentContains
                  in: query
                  description: 내용 내 검색
                  schema:
                    type: string
                - name: tags
                  in: query
                  description: 특정 태그 검색
                  schema:
                    type: array
                    items:
                        type: string
                - name: authorId
                  in: query
                  description: 작성자 ID 필터
                  schema:
                    type: string
                - name: createdAfter
                  in: query
                  description: 작성 기간 필터
                  schema:
                    type: string
                    format: date-time
                - name: createdBefore
                  in: query
                  schema:
                    type: string
                    format: date-time
                - name: pageSize
                  in: query
                  description: 페이지네이션 정보
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  schema:
                    type: string
                - name: sortDirection
                  in: query
                  schema:
                    type: integer
                    format: enum
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPostingsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/postings/{postingId}:
        get:
            tags:
                - BoardService
            description: |-
                GetPosting은 지정된 ID의 게시물을 조회합니다.
                 존재하지 않는 ID를 요청하면 NOT_FOUND 오류가 반환됩니다.
                 요청 시 조회수(view_count)가 자동으로 증가합니다.

                 인증 요구사항:
                 - 공개 게시물(PUBLISHED)은 인증 없이 접근 가능합니다.
                 - 초안(DRAFT)은 작성자나 관리자만 조회 가능합니다.
                 - 삭제된 게시물(DELETED)은 관리자만 조회 가능합니다.
            operationId: BoardService_GetPosting
            parameters:
                - name: postingId
                  in: path
                  description: 조회할 게시물의 ID (필수)
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Posting'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        put:
            tags:
                - BoardService
            description: |-
                UpdatePosting은 기존 게시물의 내용을 수정합니다.
                 게시물 작성자만 수정할 수 있으며, 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
                 필수 필드: posting_id
                 선택적으로 title, content, tags, status 필드를 수정할 수 있습니다.
            operationId: BoardService_UpdatePosting
            parameters:
                - name: postingId
                  in: path
                  description: 수정할 게시물의 ID (필수)
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdatePostingRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Posting'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - BoardService
            description: |-
                DeletePosting은 게시물을 삭제 상태로 변경합니다(실제 삭제는 아님).
                 게시물 작성자나 관리자만 삭제할 수 있습니다.
                 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
            operationId: BoardService_DeletePosting
            parameters:
                - name: postingId
                  in: path
                  description: 삭제할 게시물의 ID (필수)
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/postings/{postingId}/comments:
        get:
            tags:
                - BoardService
            description: |-
                ListCommentsByPosting은 특정 게시물에 달린 모든 댓글을 조회합니다.
                 페이지네이션을 지원하며, 정렬 방향을 지정할 수 있습니다.
                 대댓글 구조는 parent_id와 depth 필드를 통해 확인할 수 있습니다.
            operationId: BoardService_ListCommentsByPosting
            parameters:
                - name: postingId
                  in: path
                  description: 댓글을 조회할 게시물의 ID (필수)
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: '한 페이지에 반환할 최대 댓글 수 (기본값: 50, 최대: 200)'
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: 페이지네이션 토큰 (첫 페이지는 빈 문자열)
                  schema:
                    type: string
                - name: sortDirection
                  in: query
                  description: '정렬 방향 (기본값: ASC - 오래된 댓글부터)'
                  schema:
                    type: integer
                    format: enum
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListCommentsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - BoardService
            description: |-
                CreateComment는 특정 게시물에 새 댓글을 작성합니다.
                 parent_id 필드를 통해 대댓글 작성이 가능합니다.
                 필수 필드: posting_id, content, author_id
            operationId: BoardService_CreateComment
            parameters:
                - name: postingId
                  in: path
                  description: 댓글을 작성할 게시물의 ID (필수)
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateCommentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Comment'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/postings/{postingId}/comments/{commentId}:
        put:
            tags:
                - BoardService
            description: |-
                UpdateComment는 기존 댓글의 내용을 수정합니다.
                 댓글 작성자만 수정할 수 있으며, 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
                 필수 필드: comment_id, posting_id, content
            operationId: BoardService_UpdateComment
            parameters:
                - name: postingId
                  in: path
                  description: 댓글이 속한 게시물의 ID (필수)
                  required: true
                  schema:
                    type: string
                - name: commentId
                  in: path
                  description: 수정할 댓글의 ID (필수)
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateCommentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Comment'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - BoardService
            description: |-
                DeleteComment는 댓글을 삭제 상태로 변경합니다(실제 삭제는 아님).
                 댓글 작성자나 게시물 작성자, 또는 관리자만 삭제할 수 있습니다.
                 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
            operationId: BoardService_DeleteComment
            parameters:
                - name: postingId
                  in: path
                  description: 댓글이 속한 게시물의 ID (필수)
                  required: true
                  schema:
                    type: string
                - name: commentId
                  in: path
                  description: 삭제할 댓글의 ID (필수)
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        Comment:
            type: object
            properties:
                commentId:
                    type: string
                    description: 댓글의 고유 식별자
                postingId:
                    type: string
                    description: 댓글이 달린 게시물의 ID
                content:
                    type: string
                    description: 댓글 내용 (최소 1자, 최대 5000자)
                authorId:
                    type: string
                    description: 작성자 ID (인증 시스템의 사용자 ID)
                authorName:
                    type: string
                    description: 작성자 표시 이름
                createdAt:
                    type: string
                    description: 댓글 생성 시간 (서버 시간 기준)
                    format: date-time
                updatedAt:
                    type: string
                    description: 댓글 최종 수정 시간
                    format: date-time
                parentId:
                    type: string
                    description: 대댓글인 경우 부모 댓글의 ID (최상위 댓글인 경우 0)
                depth:
                    type: integer
                    description: '댓글 깊이 (최상위 댓글: 0, 대댓글: 1 이상)'
                    format: int32
                status:
                    type: integer
                    description: 댓글의 현재 상태
                    format: enum
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/Comment'
                    description: 대댓글 목록
            description: Comment는 게시물에 달린 댓글 정보를 나타냅니다.
        CreateCommentRequest:
            type: object
            properties:
                postingId:
                    type: string
                    description: 댓글을 작성할 게시물의 ID (필수)
                content:
                    type: string
                    description: 댓글 내용 (필수, 최소 1자, 최대 5000자)
                authorId:
                    type: string
                    description: 작성자 ID (필수, 인증 시스템의 사용자 ID)
                parentId:
                    type: string
                    description: 대댓글인 경우 부모 댓글의 ID (최상위 댓글인 경우 0)
            description: CreateCommentRequest는 댓글 생성 요청 정보를 포함합니다.
        CreatePostingRequest:
            type: object
            properties:
                title:
                    type: string
                    description: 게시물 제목 (필수, 최소 1자, 최대 200자)
                content:
                    type: string
                    description: 게시물 본문 내용 (필수, 최대 50000자)
                authorId:
                    type: string
                    description: 작성자 ID (필수, 인증 시스템의 사용자 ID)
                tags:
                    type: array
                    items:
                        type: string
                    description: 게시물에 적용할 태그 목록 (선택, 각 태그 최대 50자, 최대 10개)
                status:
                    type: integer
                    description: '게시물 상태 (선택, 기본값: PUBLISHED)'
                    format: enum
            description: CreatePostingRequest는 새 게시물 생성 요청 정보를 포함합니다.
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        ListCommentsResponse:
            type: object
            properties:
                comments:
                    type: array
                    items:
                        $ref: '#/components/schemas/Comment'
                    description: 조회된 댓글 목록
                nextPageToken:
                    type: string
                    description: 다음 페이지를 요청할 때 사용할 토큰 (마지막 페이지면 빈 문자열)
                totalCount:
                    type: integer
                    description: 해당 게시물의 전체 댓글 수
                    format: int32
            description: ListCommentsResponse는 댓글 목록 조회 응답 정보를 포함합니다.
        ListPostingsResponse:
            type: object
            properties:
                postings:
                    type: array
                    items:
                        $ref: '#/components/schemas/Posting'
                    description: 조회된 게시물 목록
                nextPageToken:
                    type: string
                    description: 다음 페이지를 요청할 때 사용할 토큰 (마지막 페이지면 빈 문자열)
                totalCount:
                    type: integer
                    description: 필터링 조건을 만족하는 전체 게시물 수
                    format: int32
            description: ListPostingsResponse는 게시물 목록 조회 응답 정보를 포함합니다.
        Posting:
            type: object
            properties:
                postingId:
                    type: string
                    description: 게시물의 고유 식별자
                title:
                    type: string
                    description: 게시물 제목 (최소 1자, 최대 200자)
                content:
                    type: string
                    description: 게시물 본문 내용 (최대 50000자)
                authorId:
                    type: string
                    description: 작성자 ID (인증 시스템의 사용자 ID)
                authorName:
                    type: string
                    description: 작성자 표시 이름
                createdAt:
                    type: string
                    description: 게시물 생성 시간 (서버 시간 기준)
                    format: date-time
                updatedAt:
                    type: string
                    description: 게시물 최종 수정 시간
                    format: date-time
                viewCount:
                    type: integer
                    description: 게시물 조회수
                    format: int32
                commentCount:
                    type: integer
                    description: 게시물에 달린 댓글 수
                    format: int32
                tags:
                    type: array
                    items:
                        type: string
                    description: 게시물에 적용된 태그 목록 (각 태그 최대 50자)
                status:
                    type: integer
                    description: 게시물의 현재 상태
                    format: enum
                comments:
                    type: array
                    items:
                        $ref: '#/components/schemas/Comment'
                    description: 게시물의 댓글 목록
            description: Posting은 게시판의 게시물 정보를 나타냅니다.
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        UpdateCommentRequest:
            type: object
            properties:
                commentId:
                    type: string
                    description: 수정할 댓글의 ID (필수)
                postingId:
                    type: string
                    description: 댓글이 속한 게시물의 ID (필수)
                content:
                    type: string
                    description: 수정할 댓글 내용 (필수, 최소 1자, 최대 5000자)
            description: UpdateCommentRequest는 댓글 수정 요청 정보를 포함합니다.
        UpdatePostingRequest:
            type: object
            properties:
                postingId:
                    type: string
                    description: 수정할 게시물의 ID (필수)
                title:
                    type: string
                    description: 수정할 제목 (선택, 최소 1자, 최대 200자)
                content:
                    type: string
                    description: 수정할 내용 (선택, 최대 50000자)
                tags:
                    type: array
                    items:
                        type: string
                    description: 수정할 태그 목록 (선택, 각 태그 최대 50자, 최대 10개)
                status:
                    type: integer
                    description: 수정할 게시물 상태 (선택)
                    format: enum
            description: UpdatePostingRequest는 게시물 수정 요청 정보를 포함합니다.
tags:
    - name: BoardService
