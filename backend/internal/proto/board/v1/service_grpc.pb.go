// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: board/v1/service.proto

package boardv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BoardService_CreatePosting_FullMethodName         = "/board.v1.BoardService/CreatePosting"
	BoardService_GetPosting_FullMethodName            = "/board.v1.BoardService/GetPosting"
	BoardService_ListPostings_FullMethodName          = "/board.v1.BoardService/ListPostings"
	BoardService_ListCommentsByPosting_FullMethodName = "/board.v1.BoardService/ListCommentsByPosting"
	BoardService_CreateComment_FullMethodName         = "/board.v1.BoardService/CreateComment"
	BoardService_UpdateComment_FullMethodName         = "/board.v1.BoardService/UpdateComment"
	BoardService_DeleteComment_FullMethodName         = "/board.v1.BoardService/DeleteComment"
	BoardService_UpdatePosting_FullMethodName         = "/board.v1.BoardService/UpdatePosting"
	BoardService_DeletePosting_FullMethodName         = "/board.v1.BoardService/DeletePosting"
	BoardService_SearchPostings_FullMethodName        = "/board.v1.BoardService/SearchPostings"
)

// BoardServiceClient is the client API for BoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BoardService는 게시물과 댓글의 생성, 조회, 수정, 삭제 기능을 제공합니다.
// 이 서비스는 RESTful API와 gRPC 인터페이스를 모두 지원합니다.
//
// 인증 요구사항:
// - 모든 API 호출은 gRPC 메타데이터에 인증 정보를 포함해야 합니다.
// - 필수 메타데이터 키:
//   - "authorization": Bearer 토큰 형식으로 "Bearer {token}" 형태로 제공
//   - "x-api-key": API 키 (선택적, 서비스 계정 인증 시 사용)
//
// 인증 오류 코드:
// - UNAUTHENTICATED: 인증 정보가 없거나 유효하지 않은 경우
// - PERMISSION_DENIED: 인증은 됐지만 요청된 작업에 대한 권한이 없는 경우
// - RESOURCE_EXHAUSTED: 속도 제한 초과 시
type BoardServiceClient interface {
	// CreatePosting은 새로운 게시물을 생성합니다.
	// 성공 시 생성된 게시물의 전체 정보를 반환합니다.
	// 필수 필드: title, content, author_id
	//
	// 인증 요구사항:
	// - 유효한 사용자 토큰이 필요합니다.
	// - author_id는 토큰의 사용자 ID와 일치해야 합니다(관리자 제외).
	CreatePosting(ctx context.Context, in *CreatePostingRequest, opts ...grpc.CallOption) (*Posting, error)
	// GetPosting은 지정된 ID의 게시물을 조회합니다.
	// 존재하지 않는 ID를 요청하면 NOT_FOUND 오류가 반환됩니다.
	// 요청 시 조회수(view_count)가 자동으로 증가합니다.
	//
	// 인증 요구사항:
	// - 공개 게시물(PUBLISHED)은 인증 없이 접근 가능합니다.
	// - 초안(DRAFT)은 작성자나 관리자만 조회 가능합니다.
	// - 삭제된 게시물(DELETED)은 관리자만 조회 가능합니다.
	GetPosting(ctx context.Context, in *GetPostingRequest, opts ...grpc.CallOption) (*Posting, error)
	// ListPostings는 페이지네이션을 지원하는 게시물 목록 조회 API입니다.
	// 정렬 및 태그 기반 필터링을 지원합니다.
	// page_token을 사용한 커서 기반 페이지네이션을 구현합니다.
	//
	// 인증 요구사항:
	// - 인증 없이 공개 게시물만 조회 가능합니다.
	// - 인증된 사용자는 자신의 초안 게시물도 결과에 포함됩니다.
	// - 관리자는 모든 게시물을 조회할 수 있습니다.
	ListPostings(ctx context.Context, in *ListPostingsRequest, opts ...grpc.CallOption) (*ListPostingsResponse, error)
	// ListCommentsByPosting은 특정 게시물에 달린 모든 댓글을 조회합니다.
	// 페이지네이션을 지원하며, 정렬 방향을 지정할 수 있습니다.
	ListCommentsByPosting(ctx context.Context, in *ListCommentsByPostingRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	// CreateComment는 특정 게시물에 새 댓글을 작성합니다.
	// parent_id 필드를 통해 대댓글 작성이 가능합니다.
	// 필수 필드: posting_id, content, author_id
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	// UpdateComment는 기존 댓글의 내용을 수정합니다.
	// 댓글 작성자만 수정할 수 있으며, 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
	// 필수 필드: comment_id, posting_id, content
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	// DeleteComment는 댓글을 삭제 상태로 변경합니다(실제 삭제는 아님).
	// 댓글 작성자나 게시물 작성자, 또는 관리자만 삭제할 수 있습니다.
	// 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdatePosting은 기존 게시물의 내용을 수정합니다.
	// 게시물 작성자만 수정할 수 있으며, 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
	// 필수 필드: posting_id
	// 선택적으로 title, content, tags, status 필드를 수정할 수 있습니다.
	UpdatePosting(ctx context.Context, in *UpdatePostingRequest, opts ...grpc.CallOption) (*Posting, error)
	// DeletePosting은 게시물을 삭제 상태로 변경합니다(실제 삭제는 아님).
	// 게시물 작성자나 관리자만 삭제할 수 있습니다.
	// 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
	DeletePosting(ctx context.Context, in *DeletePostingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SearchPostings는 게시물 제목과 내용에서 검색어를 포함하는 게시물을 찾습니다.
	// 페이지네이션과 정렬 방향을 지원합니다.
	// query가 비어있으면 모든 게시물을 반환합니다.
	SearchPostings(ctx context.Context, in *SearchPostingsRequest, opts ...grpc.CallOption) (*ListPostingsResponse, error)
}

type boardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardServiceClient(cc grpc.ClientConnInterface) BoardServiceClient {
	return &boardServiceClient{cc}
}

func (c *boardServiceClient) CreatePosting(ctx context.Context, in *CreatePostingRequest, opts ...grpc.CallOption) (*Posting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Posting)
	err := c.cc.Invoke(ctx, BoardService_CreatePosting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetPosting(ctx context.Context, in *GetPostingRequest, opts ...grpc.CallOption) (*Posting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Posting)
	err := c.cc.Invoke(ctx, BoardService_GetPosting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ListPostings(ctx context.Context, in *ListPostingsRequest, opts ...grpc.CallOption) (*ListPostingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPostingsResponse)
	err := c.cc.Invoke(ctx, BoardService_ListPostings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ListCommentsByPosting(ctx context.Context, in *ListCommentsByPostingRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, BoardService_ListCommentsByPosting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comment)
	err := c.cc.Invoke(ctx, BoardService_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comment)
	err := c.cc.Invoke(ctx, BoardService_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoardService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdatePosting(ctx context.Context, in *UpdatePostingRequest, opts ...grpc.CallOption) (*Posting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Posting)
	err := c.cc.Invoke(ctx, BoardService_UpdatePosting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DeletePosting(ctx context.Context, in *DeletePostingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoardService_DeletePosting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) SearchPostings(ctx context.Context, in *SearchPostingsRequest, opts ...grpc.CallOption) (*ListPostingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPostingsResponse)
	err := c.cc.Invoke(ctx, BoardService_SearchPostings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServiceServer is the server API for BoardService service.
// All implementations must embed UnimplementedBoardServiceServer
// for forward compatibility.
//
// BoardService는 게시물과 댓글의 생성, 조회, 수정, 삭제 기능을 제공합니다.
// 이 서비스는 RESTful API와 gRPC 인터페이스를 모두 지원합니다.
//
// 인증 요구사항:
// - 모든 API 호출은 gRPC 메타데이터에 인증 정보를 포함해야 합니다.
// - 필수 메타데이터 키:
//   - "authorization": Bearer 토큰 형식으로 "Bearer {token}" 형태로 제공
//   - "x-api-key": API 키 (선택적, 서비스 계정 인증 시 사용)
//
// 인증 오류 코드:
// - UNAUTHENTICATED: 인증 정보가 없거나 유효하지 않은 경우
// - PERMISSION_DENIED: 인증은 됐지만 요청된 작업에 대한 권한이 없는 경우
// - RESOURCE_EXHAUSTED: 속도 제한 초과 시
type BoardServiceServer interface {
	// CreatePosting은 새로운 게시물을 생성합니다.
	// 성공 시 생성된 게시물의 전체 정보를 반환합니다.
	// 필수 필드: title, content, author_id
	//
	// 인증 요구사항:
	// - 유효한 사용자 토큰이 필요합니다.
	// - author_id는 토큰의 사용자 ID와 일치해야 합니다(관리자 제외).
	CreatePosting(context.Context, *CreatePostingRequest) (*Posting, error)
	// GetPosting은 지정된 ID의 게시물을 조회합니다.
	// 존재하지 않는 ID를 요청하면 NOT_FOUND 오류가 반환됩니다.
	// 요청 시 조회수(view_count)가 자동으로 증가합니다.
	//
	// 인증 요구사항:
	// - 공개 게시물(PUBLISHED)은 인증 없이 접근 가능합니다.
	// - 초안(DRAFT)은 작성자나 관리자만 조회 가능합니다.
	// - 삭제된 게시물(DELETED)은 관리자만 조회 가능합니다.
	GetPosting(context.Context, *GetPostingRequest) (*Posting, error)
	// ListPostings는 페이지네이션을 지원하는 게시물 목록 조회 API입니다.
	// 정렬 및 태그 기반 필터링을 지원합니다.
	// page_token을 사용한 커서 기반 페이지네이션을 구현합니다.
	//
	// 인증 요구사항:
	// - 인증 없이 공개 게시물만 조회 가능합니다.
	// - 인증된 사용자는 자신의 초안 게시물도 결과에 포함됩니다.
	// - 관리자는 모든 게시물을 조회할 수 있습니다.
	ListPostings(context.Context, *ListPostingsRequest) (*ListPostingsResponse, error)
	// ListCommentsByPosting은 특정 게시물에 달린 모든 댓글을 조회합니다.
	// 페이지네이션을 지원하며, 정렬 방향을 지정할 수 있습니다.
	ListCommentsByPosting(context.Context, *ListCommentsByPostingRequest) (*ListCommentsResponse, error)
	// CreateComment는 특정 게시물에 새 댓글을 작성합니다.
	// parent_id 필드를 통해 대댓글 작성이 가능합니다.
	// 필수 필드: posting_id, content, author_id
	CreateComment(context.Context, *CreateCommentRequest) (*Comment, error)
	// UpdateComment는 기존 댓글의 내용을 수정합니다.
	// 댓글 작성자만 수정할 수 있으며, 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
	// 필수 필드: comment_id, posting_id, content
	UpdateComment(context.Context, *UpdateCommentRequest) (*Comment, error)
	// DeleteComment는 댓글을 삭제 상태로 변경합니다(실제 삭제는 아님).
	// 댓글 작성자나 게시물 작성자, 또는 관리자만 삭제할 수 있습니다.
	// 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
	DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error)
	// UpdatePosting은 기존 게시물의 내용을 수정합니다.
	// 게시물 작성자만 수정할 수 있으며, 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
	// 필수 필드: posting_id
	// 선택적으로 title, content, tags, status 필드를 수정할 수 있습니다.
	UpdatePosting(context.Context, *UpdatePostingRequest) (*Posting, error)
	// DeletePosting은 게시물을 삭제 상태로 변경합니다(실제 삭제는 아님).
	// 게시물 작성자나 관리자만 삭제할 수 있습니다.
	// 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
	DeletePosting(context.Context, *DeletePostingRequest) (*emptypb.Empty, error)
	// SearchPostings는 게시물 제목과 내용에서 검색어를 포함하는 게시물을 찾습니다.
	// 페이지네이션과 정렬 방향을 지원합니다.
	// query가 비어있으면 모든 게시물을 반환합니다.
	SearchPostings(context.Context, *SearchPostingsRequest) (*ListPostingsResponse, error)
	mustEmbedUnimplementedBoardServiceServer()
}

// UnimplementedBoardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBoardServiceServer struct{}

func (UnimplementedBoardServiceServer) CreatePosting(context.Context, *CreatePostingRequest) (*Posting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosting not implemented")
}
func (UnimplementedBoardServiceServer) GetPosting(context.Context, *GetPostingRequest) (*Posting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosting not implemented")
}
func (UnimplementedBoardServiceServer) ListPostings(context.Context, *ListPostingsRequest) (*ListPostingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostings not implemented")
}
func (UnimplementedBoardServiceServer) ListCommentsByPosting(context.Context, *ListCommentsByPostingRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentsByPosting not implemented")
}
func (UnimplementedBoardServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedBoardServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedBoardServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedBoardServiceServer) UpdatePosting(context.Context, *UpdatePostingRequest) (*Posting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosting not implemented")
}
func (UnimplementedBoardServiceServer) DeletePosting(context.Context, *DeletePostingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosting not implemented")
}
func (UnimplementedBoardServiceServer) SearchPostings(context.Context, *SearchPostingsRequest) (*ListPostingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPostings not implemented")
}
func (UnimplementedBoardServiceServer) mustEmbedUnimplementedBoardServiceServer() {}
func (UnimplementedBoardServiceServer) testEmbeddedByValue()                      {}

// UnsafeBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServiceServer will
// result in compilation errors.
type UnsafeBoardServiceServer interface {
	mustEmbedUnimplementedBoardServiceServer()
}

func RegisterBoardServiceServer(s grpc.ServiceRegistrar, srv BoardServiceServer) {
	// If the following call pancis, it indicates UnimplementedBoardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BoardService_ServiceDesc, srv)
}

func _BoardService_CreatePosting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).CreatePosting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_CreatePosting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).CreatePosting(ctx, req.(*CreatePostingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetPosting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetPosting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_GetPosting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetPosting(ctx, req.(*GetPostingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ListPostings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ListPostings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_ListPostings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ListPostings(ctx, req.(*ListPostingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ListCommentsByPosting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsByPostingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ListCommentsByPosting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_ListCommentsByPosting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ListCommentsByPosting(ctx, req.(*ListCommentsByPostingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdatePosting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdatePosting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_UpdatePosting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdatePosting(ctx, req.(*UpdatePostingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DeletePosting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DeletePosting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_DeletePosting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DeletePosting(ctx, req.(*DeletePostingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_SearchPostings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPostingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).SearchPostings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_SearchPostings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).SearchPostings(ctx, req.(*SearchPostingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardService_ServiceDesc is the grpc.ServiceDesc for BoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "board.v1.BoardService",
	HandlerType: (*BoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosting",
			Handler:    _BoardService_CreatePosting_Handler,
		},
		{
			MethodName: "GetPosting",
			Handler:    _BoardService_GetPosting_Handler,
		},
		{
			MethodName: "ListPostings",
			Handler:    _BoardService_ListPostings_Handler,
		},
		{
			MethodName: "ListCommentsByPosting",
			Handler:    _BoardService_ListCommentsByPosting_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _BoardService_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _BoardService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _BoardService_DeleteComment_Handler,
		},
		{
			MethodName: "UpdatePosting",
			Handler:    _BoardService_UpdatePosting_Handler,
		},
		{
			MethodName: "DeletePosting",
			Handler:    _BoardService_DeletePosting_Handler,
		},
		{
			MethodName: "SearchPostings",
			Handler:    _BoardService_SearchPostings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "board/v1/service.proto",
}
