syntax = "proto3";

package board.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "gnostic/openapi/v3/annotations.proto";

// BoardService는 게시물과 댓글의 생성, 조회, 수정, 삭제 기능을 제공합니다.
// 이 서비스는 RESTful API와 gRPC 인터페이스를 모두 지원합니다.
//
// 인증 요구사항:
// - 모든 API 호출은 gRPC 메타데이터에 인증 정보를 포함해야 합니다.
// - 필수 메타데이터 키:
//   * "authorization": Bearer 토큰 형식으로 "Bearer {token}" 형태로 제공
//   * "x-api-key": API 키 (선택적, 서비스 계정 인증 시 사용)
//
// 인증 오류 코드:
// - UNAUTHENTICATED: 인증 정보가 없거나 유효하지 않은 경우
// - PERMISSION_DENIED: 인증은 됐지만 요청된 작업에 대한 권한이 없는 경우
// - RESOURCE_EXHAUSTED: 속도 제한 초과 시
service BoardService {
  // CreatePosting은 새로운 게시물을 생성합니다.
  // 성공 시 생성된 게시물의 전체 정보를 반환합니다.
  // 필수 필드: title, content, author_id
  //
  // 인증 요구사항:
  // - 유효한 사용자 토큰이 필요합니다.
  // - author_id는 토큰의 사용자 ID와 일치해야 합니다(관리자 제외).
  rpc CreatePosting(CreatePostingRequest) returns (Posting) {
    option (google.api.http) = {
      post: "/v1/postings"
      body: "*"
    };
  }
  
  // GetPosting은 지정된 ID의 게시물을 조회합니다.
  // 존재하지 않는 ID를 요청하면 NOT_FOUND 오류가 반환됩니다.
  // 요청 시 조회수(view_count)가 자동으로 증가합니다.
  //
  // 인증 요구사항:
  // - 공개 게시물(PUBLISHED)은 인증 없이 접근 가능합니다.
  // - 초안(DRAFT)은 작성자나 관리자만 조회 가능합니다.
  // - 삭제된 게시물(DELETED)은 관리자만 조회 가능합니다.
  rpc GetPosting(GetPostingRequest) returns (Posting) {
    option (google.api.http) = {
      get: "/v1/postings/{posting_id}"
    };
  }
  
  // ListPostings는 페이지네이션을 지원하는 게시물 목록 조회 API입니다.
  // 정렬 및 태그 기반 필터링을 지원합니다.
  // page_token을 사용한 커서 기반 페이지네이션을 구현합니다.
  //
  // 인증 요구사항:
  // - 인증 없이 공개 게시물만 조회 가능합니다.
  // - 인증된 사용자는 자신의 초안 게시물도 결과에 포함됩니다.
  // - 관리자는 모든 게시물을 조회할 수 있습니다.
  rpc ListPostings(ListPostingsRequest) returns (ListPostingsResponse) {
    option (google.api.http) = {
      get: "/v1/postings"
    };
  }

  // ListCommentsByPosting은 특정 게시물에 달린 모든 댓글을 조회합니다.
  // 페이지네이션을 지원하며, 정렬 방향을 지정할 수 있습니다.
  // 대댓글 구조는 parent_id와 depth 필드를 통해 확인할 수 있습니다.
  rpc ListCommentsByPosting(ListCommentsByPostingRequest) returns (ListCommentsResponse) {
    option (google.api.http) = {
      get: "/v1/postings/{posting_id}/comments"
    };
  }

  // CreateComment는 특정 게시물에 새 댓글을 작성합니다.
  // parent_id 필드를 통해 대댓글 작성이 가능합니다.
  // 필수 필드: posting_id, content, author_id
  rpc CreateComment(CreateCommentRequest) returns (Comment) {
    option (google.api.http) = {
      post: "/v1/postings/{posting_id}/comments"
      body: "*"
    };
  }

  // UpdateComment는 기존 댓글의 내용을 수정합니다.
  // 댓글 작성자만 수정할 수 있으며, 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
  // 필수 필드: comment_id, posting_id, content
  rpc UpdateComment(UpdateCommentRequest) returns (Comment) {
    option (google.api.http) = {
      put: "/v1/postings/{posting_id}/comments/{comment_id}"
      body: "*"
    };
  }

  // DeleteComment는 댓글을 삭제 상태로 변경합니다(실제 삭제는 아님).
  // 댓글 작성자나 게시물 작성자, 또는 관리자만 삭제할 수 있습니다.
  // 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
  rpc DeleteComment(DeleteCommentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/postings/{posting_id}/comments/{comment_id}"
    };
  }
  
  // UpdatePosting은 기존 게시물의 내용을 수정합니다.
  // 게시물 작성자만 수정할 수 있으며, 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
  // 필수 필드: posting_id
  // 선택적으로 title, content, tags, status 필드를 수정할 수 있습니다.
  rpc UpdatePosting(UpdatePostingRequest) returns (Posting) {
    option (google.api.http) = {
      put: "/v1/postings/{posting_id}"
      body: "*"
    };
  }
  
  // DeletePosting은 게시물을 삭제 상태로 변경합니다(실제 삭제는 아님).
  // 게시물 작성자나 관리자만 삭제할 수 있습니다.
  // 권한이 없으면 PERMISSION_DENIED 오류가 발생합니다.
  rpc DeletePosting(DeletePostingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/postings/{posting_id}"
    };
  }
  
  // SearchPostings는 게시물 제목과 내용에서 검색어를 포함하는 게시물을 찾습니다.
  // 페이지네이션과 정렬 방향을 지원합니다.
  // query가 비어있으면 모든 게시물을 반환합니다.
  rpc SearchPostings(SearchPostingsRequest) returns (ListPostingsResponse) {
    option (google.api.http) = {
      get: "/v1/postings/search"
    };
  }
}

// PostingStatus는 게시물의 현재 상태를 나타냅니다.
enum PostingStatus {
  // 상태가 명시되지 않음(기본값)
  POSTING_STATUS_UNSPECIFIED = 0;
  // 공개 상태의 게시물
  POSTING_STATUS_PUBLISHED = 1;
  // 작성 중인 초안 상태
  POSTING_STATUS_DRAFT = 2;
  // 삭제된 게시물(논리적 삭제)
  POSTING_STATUS_DELETED = 3;
}

// CommentStatus는 댓글의 현재 상태를 나타냅니다.
enum CommentStatus {
  // 상태가 명시되지 않음(기본값)
  COMMENT_STATUS_UNSPECIFIED = 0;
  // 공개 상태의 댓글
  COMMENT_STATUS_PUBLISHED = 1;
  // 삭제된 댓글(논리적 삭제)
  COMMENT_STATUS_DELETED = 2;
}

// Posting은 게시판의 게시물 정보를 나타냅니다.
message Posting {
  // 게시물의 고유 식별자
  int64 posting_id = 1;
  // 게시물 제목 (최소 1자, 최대 200자)
  string title = 2;
  // 게시물 본문 내용 (최대 50000자)
  string content = 3;
  // 작성자 ID (인증 시스템의 사용자 ID)
  string author_id = 4;
  // 작성자 표시 이름
  string author_name = 5;
  // 게시물 생성 시간 (서버 시간 기준)
  google.protobuf.Timestamp created_at = 6;
  // 게시물 최종 수정 시간
  google.protobuf.Timestamp updated_at = 7;
  // 게시물 조회수
  int32 view_count = 8;
  // 게시물에 달린 댓글 수
  int32 comment_count = 9;
  // 게시물에 적용된 태그 목록 (각 태그 최대 50자)
  repeated string tags = 10;
  // 게시물의 현재 상태
  PostingStatus status = 11;
  // 게시물의 댓글 목록
  repeated Comment comments = 12;
}

// Comment는 게시물에 달린 댓글 정보를 나타냅니다.
message Comment {
  // 댓글의 고유 식별자
  int64 comment_id = 1;
  // 댓글이 달린 게시물의 ID
  int64 posting_id = 2;
  // 댓글 내용 (최소 1자, 최대 5000자)
  string content = 3;
  // 작성자 ID (인증 시스템의 사용자 ID)
  string author_id = 4;
  // 작성자 표시 이름
  string author_name = 5;
  // 댓글 생성 시간 (서버 시간 기준)
  google.protobuf.Timestamp created_at = 6;
  // 댓글 최종 수정 시간
  google.protobuf.Timestamp updated_at = 7;
  // 대댓글인 경우 부모 댓글의 ID (최상위 댓글인 경우 0)
  int64 parent_id = 8;
  // 댓글 깊이 (최상위 댓글: 0, 대댓글: 1 이상)
  int32 depth = 9;
  // 댓글의 현재 상태
  CommentStatus status = 10;
  // 대댓글 목록
  repeated Comment children = 11;
}

// CreatePostingRequest는 새 게시물 생성 요청 정보를 포함합니다.
message CreatePostingRequest {
  // 게시물 제목 (필수, 최소 1자, 최대 200자)
  string title = 1;
  // 게시물 본문 내용 (필수, 최대 50000자)
  string content = 2;
  // 작성자 ID (필수, 인증 시스템의 사용자 ID)
  string author_id = 3;
  // 게시물에 적용할 태그 목록 (선택, 각 태그 최대 50자, 최대 10개)
  repeated string tags = 4;
  // 게시물 상태 (선택, 기본값: PUBLISHED)
  PostingStatus status = 5;
}

// GetPostingRequest는 게시물 조회 요청 정보를 포함합니다.
message GetPostingRequest {
  // 조회할 게시물의 ID (필수)
  int64 posting_id = 1;
}

// SortBy는 게시물 목록 정렬 기준을 정의합니다.
enum SortBy {
  // 정렬 기준이 명시되지 않음(기본값: CREATED_AT)
  SORT_BY_UNSPECIFIED = 0;
  // 생성 시간 기준 정렬
  SORT_BY_CREATED_AT = 1;
  // 수정 시간 기준 정렬
  SORT_BY_UPDATED_AT = 2;
  // 조회수 기준 정렬
  SORT_BY_VIEW_COUNT = 3;
}

// SortDirection은 정렬 방향을 정의합니다.
enum SortDirection {
  // 정렬 방향이 명시되지 않음(기본값: DESC)
  SORT_DIRECTION_UNSPECIFIED = 0;
  // 오름차순 정렬 (과거→현재, 적은→많은)
  SORT_DIRECTION_ASC = 1;
  // 내림차순 정렬 (현재→과거, 많은→적은)
  SORT_DIRECTION_DESC = 2;
}

// ListPostingsRequest는 게시물 목록 조회 요청 정보를 포함합니다.
message ListPostingsRequest {
  // 한 페이지에 반환할 최대 게시물 수 (기본값: 20, 최대: 100)
  int32 page_size = 1;
  // 페이지네이션 토큰 (첫 페이지는 빈 문자열)
  string page_token = 2;
  // 정렬 기준 (기본값: CREATED_AT)
  SortBy sort_by = 3;
  // 정렬 방향 (기본값: DESC)
  SortDirection sort_direction = 4;
  // 태그로 필터링 (선택, 특정 태그가 있는 게시물만 표시)
  string filter_by_tag = 5;
}

// ListPostingsResponse는 게시물 목록 조회 응답 정보를 포함합니다.
message ListPostingsResponse {
  // 조회된 게시물 목록
  repeated Posting postings = 1;
  // 다음 페이지를 요청할 때 사용할 토큰 (마지막 페이지면 빈 문자열)
  string next_page_token = 2;
  // 필터링 조건을 만족하는 전체 게시물 수
  int32 total_count = 3;
}

// UpdatePostingRequest는 게시물 수정 요청 정보를 포함합니다.
message UpdatePostingRequest {
  // 수정할 게시물의 ID (필수)
  int64 posting_id = 1;
  // 수정할 제목 (선택, 최소 1자, 최대 200자)
  string title = 2;
  // 수정할 내용 (선택, 최대 50000자)
  string content = 3;
  // 수정할 태그 목록 (선택, 각 태그 최대 50자, 최대 10개)
  repeated string tags = 4;
  // 수정할 게시물 상태 (선택)
  PostingStatus status = 5;
}

// DeletePostingRequest는 게시물 삭제 요청 정보를 포함합니다.
message DeletePostingRequest {
  // 삭제할 게시물의 ID (필수)
  int64 posting_id = 1;
}

// SearchPostingsRequest는 게시물 검색 요청 정보를 포함합니다.
message SearchPostingsRequest {
  // 기본 검색어
  string text = 1;
  // 제목 내 검색
  string title_contains = 2;
  // 내용 내 검색
  string content_contains = 3;
  // 특정 태그 검색
  repeated string tags = 4;
  // 작성자 ID 필터
  string author_id = 5;
  // 작성 기간 필터
  google.protobuf.Timestamp created_after = 6;
  google.protobuf.Timestamp created_before = 7;
  // 페이지네이션 정보
  int32 page_size = 8;
  string page_token = 9;
  SortDirection sort_direction = 10;
}

// CreateCommentRequest는 댓글 생성 요청 정보를 포함합니다.
message CreateCommentRequest {
  // 댓글을 작성할 게시물의 ID (필수)
  int64 posting_id = 1; // string에서 int64로 변경
  // 댓글 내용 (필수, 최소 1자, 최대 5000자)
  string content = 2;
  // 작성자 ID (필수, 인증 시스템의 사용자 ID)
  string author_id = 3;
  // 대댓글인 경우 부모 댓글의 ID (최상위 댓글인 경우 0)
  int64 parent_id = 4; // string에서 int64로 변경
}

// ListCommentsByPostingRequest는 게시물별 댓글 목록 조회 요청 정보를 포함합니다.
message ListCommentsByPostingRequest {
  // 댓글을 조회할 게시물의 ID (필수)
  int64 posting_id = 1;
  // 한 페이지에 반환할 최대 댓글 수 (기본값: 50, 최대: 200)
  int32 page_size = 2;
  // 페이지네이션 토큰 (첫 페이지는 빈 문자열)
  string page_token = 3;
  // 정렬 방향 (기본값: ASC - 오래된 댓글부터)
  SortDirection sort_direction = 4;
}

// ListCommentsResponse는 댓글 목록 조회 응답 정보를 포함합니다.
message ListCommentsResponse {
  // 조회된 댓글 목록
  repeated Comment comments = 1;
  // 다음 페이지를 요청할 때 사용할 토큰 (마지막 페이지면 빈 문자열)
  string next_page_token = 2;
  // 해당 게시물의 전체 댓글 수
  int32 total_count = 3;
}

// UpdateCommentRequest는 댓글 수정 요청 정보를 포함합니다.
message UpdateCommentRequest {
  // 수정할 댓글의 ID (필수)
  int64 comment_id = 1;
  // 댓글이 속한 게시물의 ID (필수)
  int64 posting_id = 2;
  // 수정할 댓글 내용 (필수, 최소 1자, 최대 5000자)
  string content = 3;
}

// DeleteCommentRequest는 댓글 삭제 요청 정보를 포함합니다.
message DeleteCommentRequest {
  // 삭제할 댓글의 ID (필수)
  int64 comment_id = 1;
  // 댓글이 속한 게시물의 ID (필수)
  int64 posting_id = 2;
}